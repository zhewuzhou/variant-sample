import java.time.LocalDate
import java.time.format.DateTimeFormatter

apply plugin: 'java-gradle-plugin'
apply plugin: 'kotlin'
apply plugin: 'jacoco-tools-base'
apply plugin: 'clone-artifacts'
//apply plugin: 'license-report'
apply plugin: 'com.google.protobuf'

gradlePlugin {
    // Define the plugin
    plugins {
        create('com.android.application') {
            id = 'com.android.application'
            implementationClass = 'com.android.build.gradle.AppPlugin'
        }
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath fileTree(dir: "../buildSrc/libs", includes: ['*.jar'])
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"
        classpath 'org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.18'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.13'
    }
}

repositories {
    google()
    mavenCentral()
    jcenter()
}

configurations {
    provided
    includeInJar
}

//licenseReport {
//    whiteList = ['org.jetbrains.trove4j:trove4j:20160824']
//}

// Set the version of the plugin in the manifest. This is used by 3rd party plugin (like Kotlin)
jar.manifest.attributes("Plugin-Version": version)
jar.manifest.attributes("Inception-Date": DateTimeFormatter.ISO_LOCAL_DATE.format(LocalDate.now()));


// Incremental update test support
File classesDir = new File(project.buildDir, "classes/incremental-test")
File baseClasses = new File(classesDir, "base")
File baseInstrumentedClasses = new File(classesDir, "baseInstrumented")

sourceSets {
    main {
        java.srcDirs += 'src/fromGradle/java'
        resources.srcDirs = ['src/main/resources', 'src/fromGradle/resources']
        compileClasspath += configurations.provided
    }

    test {
        compileClasspath += files(baseClasses)
        runtimeClasspath += files(baseInstrumentedClasses)
    }
}

dependencies {
      compile project(':gradle-api')

//    compile project(':base:builder')
//    compile project(':base:build-system:aaptcompiler')
//    compile project(':analytics-library:crash')
//    compile project(':base:lint-gradle-api')
//    compile project(':base:gradle-api')
//    compile project(':dataBinding:compilerCommon')

    compile fileTree(dir: "../libs", include: "*.jar")

//    compile libs.kotlin_stdlib
    compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.72'
//    compile libs.transform_api_deprecated
    compile 'com.android.tools.build:transform-api:2.0.0-deprecated-use-gradle-api'
//    compile libs.asm
    compile 'org.ow2.asm:asm:7.0'
//    compile libs.asm_analysis
    compile 'org.ow2.asm:asm-analysis:7.0'
//    compile libs.asm_commons
    compile 'org.ow2.asm:asm-commons:7.0'
//    compile libs.asm_util
    compile 'org.ow2.asm:asm-util:7.0'
//    compile libs.jopt
    compile 'net.sf.jopt-simple:jopt-simple:4.9'
//    compile libs.proguard
    compile 'net.sf.proguard:proguard-gradle:6.0.3'
//    compile libs.bundle_tool
    compile 'com.android.tools.build:bundletool:0.13.2'
//    compile libs.jetifier_core
    compile 'com.android.tools.build.jetifier:jetifier-core:1.0.0-beta09'
//    compile libs.jetifier_processor
    compile 'com.android.tools.build.jetifier:jetifier-processor:1.0.0-beta09'
//    compile libs.protobuf
    compile 'com.google.protobuf:protobuf-java:3.10.0'
//    compile libs.protobuf_util
    compile 'com.google.protobuf:protobuf-java-util:3.10.0'
//    compile libs.tink
    compile 'com.google.crypto.tink:tink:1.3.0-rc2'

    compile 'org.apache.httpcomponents:httpmime:4.5.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.ow2.asm', name: 'asm-analysis', version: '7.0'
    compile group: 'org.ow2.asm', name: 'asm', version: '7.0'

//    compileOnly libs.kotlin_gradle_plugin
    compileOnly 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'

//    compileOnly libs.jacoco_core
    compileOnly 'org.jacoco:org.jacoco.core:0.7.9'
//    compileOnly libs.jacoco_report
    compileOnly 'org.jacoco:org.jacoco.report:0.7.9'

    // Add gradleApi to classpath for compilation, but use provided configuration so that groovy is
    // not exposed as a runtime dependency.
    provided gradleApi()

    testCompile gradleApi()

//    testCompile libs.junit
    testCompile 'junit:junit:4.12'
//    testCompile libs.truth
    testCompile 'com.google.truth:truth:0.44'
//    testCompile libs.kotlin_test
    testCompile 'org.jetbrains.kotlin:kotlin-test:1.3.72'
//    testCompile libs.mockito_core
    testCompile 'org.mockito:mockito-core:2.19.0'
//    testCompile libs.guava
    testCompile 'com.google.guava:guava:28.1-jre'
//    testCompile libs.equalsverifier
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.1.5'
//    testCompile project(':base:project-test-lib')
//    testCompile project(':base:testutils')
    testCompile 'org.jetbrains:annotations:13.0'
//    testCompile libs.jsoup
    testCompile 'org.jsoup:jsoup:1.6.3'
//    testCompile libs.jacoco_core
    testCompile 'org.jacoco:org.jacoco.core:0.7.9'
//    testCompile libs.jacoco_report
    testCompile 'org.jacoco:org.jacoco.report:0.7.9'
//    testCompile libs.kotlin_gradle_plugin
    testCompile 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72'
//    testCompile testFixtures(project(":base:repository"))
    testCompile group: 'com.google.jimfs', name: 'jimfs', version: '1.1'
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.48'

    compile fileTree(dir: "../libs/test", include: "*.jar")

}

def libs = [:].withDefault { key -> throw new IllegalArgumentException('"' + key + '" not a valid dependency.') }
libs['protobuf'] = 'com.google.protobuf:protobuf-java:3.10.0'
libs['proto_compiler'] = libs['protobuf'].replace('protobuf-java', 'protoc')
protobuf {
    protoc {
        artifact = libs.proto_compiler
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjvm-default=enable"]
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ["-Xjvm-default=enable"]
    }
}

group = 'com.android.tools.build'
archivesBaseName = 'gradle'
version = "111"

project.ext.pomName = 'Gradle Plug-in for Android'
project.ext.pomDesc = 'Gradle plug-in to build Android applications.'

//apply from: "$rootDir/buildSrc/base/publish.gradle"
//apply from: "$rootDir/buildSrc/base/bintray.gradle"

//test {
//    environment("CUSTOM_REPO",
//            new File(rootProject.ext.androidHostOut, "repo").toString()
//                    + File.pathSeparator
//                    + rootProject.file("../prebuilts/tools/common/m2/repository/").toString())
//
//    testLogging {
//        events "failed"
//    }
//
//    maxParallelForks = Runtime.runtime.availableProcessors() / 2
//
//    exclude "**/GradleCoreBazelSuite*"
//}

javadoc {
    exclude "**/internal/**"

    options.docTitle "Gradle Plugin for Android"
    options.header ""
    options.footer "Copyright (C) 2012 The Android Open Source Project"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir

}

tasks.withType(Javadoc) {
    classpath += configurations.provided
}

// Only package JavaDoc if using --init-script=buildSrc/base/release.gradle
if (project.hasProperty("release")) {
    artifacts {
        archives javadocJar
    }
}
//
//tasks.processResources {
//    from(rootProject.file("../prebuilts/tools/common/aapt/aapt2_version.properties")) {
//        into "com/android/build/gradle/internal/res/"
//    }
//}

// End Package instant run instrumentation inside of gradle-core.

// Incremental update test support
javadoc {
    classpath += configurations.provided
}

// setup annotation processor output directory
File generatedSources = new File(project.buildDir, 'generated/generated')
tasks.compileJava {
    doFirst {
        generatedSources.mkdirs()
    }
    options.compilerArgs += ['-s', generatedSources]
    outputs.dir(generatedSources)
}

// Configure validateTaskProperties task
tasks.validateTaskProperties.configure {
    // Always run this task so we can see the report in the console with every run
    outputs.upToDateWhen { false }

    // Enable strict mode so we can see more warnings
    enableStricterValidation = true
}
